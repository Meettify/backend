plugins {
    id 'java'
    id 'org.springframework.boot' version '3.2.9'
    id 'io.spring.dependency-management' version '1.1.6'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
    maven { url 'https://jitpack.io' }
}

dependencies {
    // JPA
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    // MongoDB
    implementation 'org.springframework.boot:spring-boot-starter-data-mongodb'
    // WEbSocket
    implementation 'org.springframework.boot:spring-boot-starter-websocket'
    implementation 'org.webjars:sockjs-client:1.1.2'
    implementation 'org.webjars:stomp-websocket:2.3.4'
    implementation 'org.webjars:stomp-websocket:2.3.4'
    implementation 'org.webjars:stomp-websocket:2.3.4'
    // OAuth2.0
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
    // Security
    implementation 'org.springframework.boot:spring-boot-starter-security'
    // rest api를 사용할 수 있게함
    implementation 'org.springframework.boot:spring-boot-starter-web'
    // Actuator
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    // prometheus
    implementation 'io.micrometer:micrometer-registry-prometheus' // Prometheus 연동을 위한 Micrometer 의존성
    // lombok
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    testCompileOnly 'org.projectlombok:lombok'
    testAnnotationProcessor 'org.projectlombok:lombok'
    // devtools
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    // H2
    runtimeOnly 'com.h2database:h2'
    // MySQL
    runtimeOnly 'com.mysql:mysql-connector-j'
    // jwt
    implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
    implementation 'io.jsonwebtoken:jjwt-impl:0.11.5'
    implementation 'io.jsonwebtoken:jjwt-jackson:0.11.5'
    // 유효성 검사 라이브러리
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    // swagger
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.1.0'
    // ModelMapper 라이브러리
    implementation 'org.modelmapper:modelmapper:3.1.1'
    // ⭐ Spring boot 3.x이상에서 QueryDsl 패키지를 정의하는 방법
    implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
    implementation 'com.querydsl:querydsl-apt'
    annotationProcessor "com.querydsl:querydsl-apt:5.0.0:jakarta"
    annotationProcessor "jakarta.annotation:jakarta.annotation-api"
    annotationProcessor "jakarta.persistence:jakarta.persistence-api"
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    // guava
    implementation 'com.google.guava:guava:32.1.2-jre'
    // S3
    implementation 'org.springframework.cloud:spring-cloud-starter-aws:2.2.6.RELEASE'
    // slack: webhook
    implementation("net.gpedro.integrations.slack:slack-webhook:1.4.0")
    implementation 'com.slack.api:slack-api-client:1.28.0'
    implementation 'com.slack.api:slack-app-backend:1.28.0'
    implementation 'com.slack.api:slack-api-model:1.28.0'
    // Redis
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    // micrometer
    implementation 'io.micrometer:micrometer-core'
    implementation("org.springframework.boot:spring-boot-starter-aop")
    // 아임포트 관련 //
    // https://mvnrepository.com/artifact/com.github.iamport/iamport-rest-client-java
    implementation group: 'com.github.iamport', name: 'iamport-rest-client-java', version: '0.2.22'
    // HTTP 요청을 간편하게 처리할 수 있도록 해주는 라이브러리로, 여기서는 RxJava와 함께 비동기 처리를 지원하는 어댑터로 사용됩니다.
    // 비동기 방식으로 API 요청을 처리할 수 있도록 도와주며, 이를 통해 아임포트 서버와의 통신을 원활하게 진행할 수 있습니다.
    implementation group: 'com.squareup.retrofit2', name: 'adapter-rxjava2', version: '2.9.0'
    // Java 객체와 JSON 간의 변환을 지원하여, 아임포트 API에서 받은 JSON 응답을 Java 객체로 변환하거나,
    // Java 객체를 JSON 형식으로 변환해 API 요청 시 활용합니다.
    implementation group: 'com.google.code.gson', name: 'gson', version: '2.8.5'
    // Retrofit과 함께 HTTP 요청을 처리하는 데 사용되며, 네트워크 통신을 효율적이고 안정적으로 관리합니다.
    implementation group: 'com.squareup.okhttp3', name: 'okhttp', version: '4.9.3'
    // API 요청 및 응답 시 Gson을 통해 JSON을 Java 객체로 직렬화/역직렬화하여 손쉽게 데이터 처리가 가능하게 합니다.
    implementation group: 'com.squareup.retrofit2', name: 'converter-gson', version: '2.3.0'
}

tasks.named('bootBuildImage') {
    builder = 'paketobuildpacks/builder-jammy-base:latest'
}

tasks.named('test') {
    useJUnitPlatform()
}

clean {
    delete file('src/main/generated')
}

tasks.withType(Test) {
    // MeettifyApplicationTests 테스트만 제외
    exclude '**/MeettifyApplicationTests*'
}

springBoot {
    buildInfo()
}