name: CI/CD Pipeline

# push와 PR날라가면 동작한다.
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Github Repository
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: application.yml 파일 만들기
        run: echo "${{secrets.APPLICATION_PROPERTIES}}" > ./src/main/resources/application-prod.yml

      - name: Install Docker
        run: |
          if ! command -v docker &> /dev/null; then
            echo "Docker is not installed. Installing..."
            sudo apt-get update
            sudo apt-get install -y apt-transport-https ca-certificates curl software-properties-common
            curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
            sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
            sudo apt-get update
            sudo apt-get install -y docker-ce docker-ce-cli containerd.io
          else
            echo "Docker is already installed."
          fi

      - name: Install Docker Compose
        run: |
          if ! command -v docker-compose &> /dev/null; then
            echo "Docker Compose is not installed. Installing..."
            sudo curl -L "https://github.com/docker/compose/releases/download/$(curl -s https://api.github.com/repos/docker/compose/releases/latest | jq -r .tag_name)/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
            sudo chmod +x /usr/local/bin/docker-compose
          else
            echo "Docker Compose is already installed."
          fi

      - name: Run Gradle Build
        run: ./gradlew clean build

      - name: Make Gradle Wrapper executable
        run: chmod +x ./gradlew

      - name: SSH to EC2 and deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{secrets.EC2_HOST}}  # EC2 퍼블릭 IP 또는 도메인
          username: ubuntu  # ubuntu는 그대로임
          key: ${{secrets.SSH_PRIVATE_KEY}}  # GitHub Secrets에 저장된 PEM 키
          port: 22
          script: |
            cd /home/ubuntu           # EC2 인스턴스의 프로젝트 디렉토리로 이동
            docker-compose down       # 기존 컨테이너 중지
            docker-compose pull       # 새로운 이미지 가져오기
            docker-compose up -d      # 서비스 재시작
          debug: true

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_PASSWORD }}

      - name: Build and push Docker image
        run: |
          docker build -t zxzz7608/meettify:latest .
          docker push zxzz7608/meettify:latest

