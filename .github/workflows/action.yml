name: CI/CD Pipeline
# main으로 이동하면 동작
on:
  pull_request:
    types: [closed] # PR이 닫힐 때 실행 즉, 머지될 때
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # 1. 코드 체크아웃
      - name: Checkout code from GitHub
        uses: actions/checkout@v4

      # 2. Gradle 의존성 캐시 설정
      - name: Cache Gradle dependencies
        uses: actions/cache@v3
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      # 3. JDK 17 설정
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      # 4. Gradle 권한주기
      - name: Make Gradle Wrapper executable
        run: chmod +x ./gradlew

      # 5. Gradle 빌드
      - name: Run Gradle Build
        env:
          RDS_MYSQL_URL: ${{ secrets.RDS_MYSQL_URL }}
          RDS_MYSQL_NAME: ${{ secrets.RDS_MYSQL_NAME }}
          RDS_MYSQL_SECRET: ${{ secrets.RDS_MYSQL_SECRET }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          S3_ACCESS: ${{ secrets.S3_ACCESS }}  # AWS 액세스 키
          S3_SECRET: ${{ secrets.S3_SECRET }}  # AWS 비밀 키
          GOOGLE_CLIENT: ${{ secrets.GOOGLE_CLIENT }}  # Google OAuth 클라이언트 ID
          GOOGLE_SECRET: ${{ secrets.GOOGLE_SECRET }}  # Google OAuth 비밀 키
          NAVER_CLIENT: ${{ secrets.NAVER_CLIENT }}  # Naver OAuth 클라이언트 ID
          NAVER_SECRET: ${{ secrets.NAVER_SECRET }}  # Naver OAuth 비밀 키
          OAUTH2_URI: ${{ secrets.OAUTH2_URI }}  # OAuth URI
          SPRING_PROFILES_ACTIVE: prod  # 활성 Spring 프로파일 설정
          REDIS_HOST: redis  # Redis 서비스 이름으로 설정
          REDIS_PORT: 6379  # Redis 포트
        run: ./gradlew clean build -x test # 테스트 제외하고 빌드

      # 6. 테스트 실행
      - name: Run Tests
        run: ./gradlew test

      # 7. Docker 설치
      - name: Install Docker
        run: |
          if ! command -v docker &> /dev/null; then
            echo "Docker is not installed. Installing..."
            sudo apt-get update
            sudo apt-get install -y apt-transport-https ca-certificates curl software-properties-common
            curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
            sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
            sudo apt-get update
            sudo apt-get install -y docker-ce docker-ce-cli containerd.io
          else
            echo "Docker is already installed."
          fi

      # Docker Compose 설치
      - name: Install Docker Compose
        run: |
          if ! command -v docker-compose &> /dev/null; then
            echo "Docker Compose is not installed. Installing..."
            sudo curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
            sudo chmod +x /usr/local/bin/docker-compose
          else
            echo "Docker Compose is already installed."
          fi
        continue-on-error: true


      # 8. 도커 로그인
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_PASSWORD }}

      # 9. Docker 프로젝트 이미지 빌드 그리고 이미지 푸시
      - name: Build and push Docker image
        uses: docker/build-push-action@v2
        with:
          context: .
          file: docker/api/Dockerfile
          push: true
          tags: ${{secrets.DOCKERHUB_REPOSITORY}}/meettify:latest

      # 10. 기존 docker-compose.yml 파일 삭제 (EC2에서)
      - name: SSH to EC2 and remove old docker-compose.yml
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.PUBLIC_IP }}
          username: ubuntu
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: 22
          script: |
            # 기존 docker-compose.yml 파일이 있으면 삭제
            if [ -f /home/ubuntu/docker-compose.yml ]; then
              echo "Old docker-compose.yml found, removing..."
              rm /home/ubuntu/docker-compose.yml
            fi

      # 11. docker-compose.yml 파일을 EC2로 복사
      - name: Copy docker-compose.yml to EC2
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.PUBLIC_IP }}
          username: ubuntu
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: 22
          source: docker-compose.yml  # 워크플로우에 있는 docker-compose.yml 파일
          target: /home/ubuntu # EC2의 대상 경로

      # 12. Gradle 빌드 후 생성된 JAR 파일을 EC2로 복사
      - name: Copy JAR file to EC2
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.PUBLIC_IP }}
          username: ubuntu
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: 22
          source: build/libs/*.jar  # 빌드 후 생성된 JAR 파일 경로
          target: /home/ubuntu/  # EC2의 대상 경로

      # 13. EC2에 SSH 접속해서 배포
      - name: SSH to EC2 and deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.PUBLIC_IP }}
          username: ubuntu
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: 22
          script: |
            echo "Stopping and removing all containers..."
            docker-compose down --remove-orphans

            containers=(k6 grafana redis prometheus nginx certbot)
  
            for container in "${containers[@]}"; do
              if [ "$(docker ps -q -f name=$container)" ]; then
                echo "Stopping $container container..."
                docker stop $container
              fi

              if [ "$(docker ps -aq -f name=$container)" ]; then
                echo "Removing existing $container container..."
                docker rm -f $container
                if [ $? -ne 0 ]; then
                  echo "Failed to remove $container container. Retrying in 5 seconds..."
                  sleep 5
                  docker rm -f $container
                fi
              else
                echo "No $container container to remove."
              fi
            done
            
            # 사용하지 않는 이미지 확인 후 삭제
            echo "Removing unused Docker images..."
            docker image prune -f

            # 최신 이미지 가져와서 컨테이너 실행
            docker-compose pull
            docker-compose up -d --build

      # 14. EC2에 SSH 접속해서 모니터링 스크립트 시작
      - name: SSH to EC2 and start monitoring script
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.PUBLIC_IP }}
          username: ubuntu
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: 22
          script: |
            nohup /home/ubuntu/monitor.sh &

