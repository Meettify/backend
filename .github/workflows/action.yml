name: CI/CD Pipeline
# main으로 이동하면 동작
on:
  workflow_dispatch:
    inputs:
      deploy:
        description: '실제 EC2 배포 실행 여부'
        required: true
        default: 'true'
        type: choice
        options:
          - 'true'
          - 'false'
  pull_request:
    types: [closed] # PR이 닫힐 때 실행 즉, 머지될 때
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Check EC2 availability
        id: ec2_check
        run: |
          timeout 3 bash -c "</dev/tcp/${{ secrets.PUBLIC_IP }}/22" && echo "ok=true" >> $GITHUB_OUTPUT || echo "ok=false" >> $GITHUB_OUTPUT

      # 1. 코드 체크아웃
      - name: Checkout code from GitHub
        uses: actions/checkout@v4

      # 2. Gradle 의존성 캐시 설정
      - name: Cache Gradle dependencies
        uses: actions/cache@v3
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      # 3. JDK 17 설정
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      # 4. Gradle 권한주기
      - name: Make Gradle Wrapper executable
        run: chmod +x ./gradlew

      # 5. Gradle 빌드
      - name: Run Gradle Build
        env:
          RDS_MYSQL_URL: ${{ secrets.RDS_MYSQL_URL }}
          RDS_MYSQL_NAME: ${{ secrets.RDS_MYSQL_NAME }}
          RDS_MYSQL_SECRET: ${{ secrets.RDS_MYSQL_SECRET }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          S3_ACCESS: ${{ secrets.S3_ACCESS }}  # AWS 액세스 키
          S3_SECRET: ${{ secrets.S3_SECRET }}  # AWS 비밀 키
          GOOGLE_CLIENT: ${{ secrets.GOOGLE_CLIENT }}  # Google OAuth 클라이언트 ID
          GOOGLE_SECRET: ${{ secrets.GOOGLE_SECRET }}  # Google OAuth 비밀 키
          NAVER_CLIENT: ${{ secrets.NAVER_CLIENT }}  # Naver OAuth 클라이언트 ID
          NAVER_SECRET: ${{ secrets.NAVER_SECRET }}  # Naver OAuth 비밀 키
          OAUTH2_URI: ${{ secrets.OAUTH2_URI }}  # OAuth URI
          SPRING_PROFILES_ACTIVE: prod  # 활성 Spring 프로파일 설정
          REDIS_HOST: redis  # Redis 서비스 이름으로 설정
          REDIS_PORT: 6379  # Redis 포트
        run: ./gradlew clean build --parallel

      # 6. Docker 설치
      - name: Install Docker
        run: |
          if ! command -v docker &> /dev/null; then
            echo "Docker is not installed. Installing..."
            sudo apt-get update
            sudo apt-get install -y apt-transport-https ca-certificates curl software-properties-common
            curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
            sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
            sudo apt-get update
            sudo apt-get install -y docker-ce docker-ce-cli containerd.io
          else
            echo "Docker is already installed."
          fi

      # 7. Docker Compose 설치
      - name: Install Docker Compose
        run: |
          if ! command -v docker-compose &> /dev/null; then
            echo "Docker Compose is not installed. Installing..."
            sudo curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
            sudo chmod +x /usr/local/bin/docker-compose
          else
            echo "Docker Compose is already installed."
          fi
        continue-on-error: true


      # 8. 도커 로그인
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_PASSWORD }}

      # 9. Docker 프로젝트 이미지 빌드 그리고 이미지 푸시
      - name: Build and push updated Docker image
        uses: docker/build-push-action@v2
        with:
          context: .
          file: docker/api/Dockerfile
          push: true
          tags: ${{secrets.DOCKERHUB_REPOSITORY}}/meettify:latest

      # 10. 기존 docker-compose.yml 파일 삭제 (EC2에서)
      - name: SSH to EC2 and remove old docker-compose.yml
        if: ${{ inputs.deploy == 'true' && steps.ec2_check.outputs.ok == 'true' }}
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.PUBLIC_IP }}
          username: ubuntu
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: 22
          script: |
            # 기존 docker-compose.yml 파일이 있으면 삭제
            if [ -f /home/ubuntu/docker-compose.yml ]; then
              echo "Old docker-compose.yml found, removing..."
              rm /home/ubuntu/docker-compose.yml
            fi

      # 11. docker-compose.yml 파일을 EC2로 복사
      - name: Copy docker-compose.yml to EC2
        if: ${{ inputs.deploy == 'true' && steps.ec2_check.outputs.ok == 'true' }}
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.PUBLIC_IP }}
          username: ubuntu
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: 22
          source: docker-compose.yml  # 워크플로우에 있는 docker-compose.yml 파일
          target: /home/ubuntu # EC2의 대상 경로

      # 12. Gradle 빌드 후 생성된 JAR 파일을 EC2로 복사
      - name: Copy JAR file to EC2
        if: ${{ inputs.deploy == 'true' && steps.ec2_check.outputs.ok == 'true' }}
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.PUBLIC_IP }}
          username: ubuntu
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: 22
          source: build/libs/*.jar  # 빌드 후 생성된 JAR 파일 경로
          target: /home/ubuntu/  # EC2의 대상 경로

      # 13. EC2에 SSH 접속해서 배포
      - name: SSH to EC2 and deploy
        if: ${{ inputs.deploy == 'true' && steps.ec2_check.outputs.ok == 'true' }}
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.PUBLIC_IP }}
          username: ubuntu
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: 22
          script: |
            
            # 사용하지 않는 이미지 및 볼륨 정리
            echo "Cleaning up unused Docker images, containers, and volumes..."
            docker image prune -a -f
            docker container prune -f

            # 변경 사항 반영 및 컨테이너 재시작
            echo "Starting updated containers..."
            docker-compose up -d --build

      # 14. Spring Boot Actuator를 이용해 컨테이너가 정상 기동됐는지 확인
      - name: Health Check (Spring Boot Actuator)
        if: ${{ inputs.deploy == 'true' && steps.ec2_check.outputs.ok == 'true' }}
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.PUBLIC_IP }}
          username: ubuntu
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: 22
          script: |
            echo "Waiting for application to start..."
            for i in {1..10}; do
              STATUS=$(curl -s -o /dev/null -w "%{http_code}" https:meettify.store/monitor/health)
              if [ "$STATUS" -eq 200 ]; then
                echo "✅ App is healthy!"
                exit 0
              fi
              echo "Waiting for health check... ($i/10)"
              sleep 5
            done
            echo "❌ Health check failed!"
            exit 1

      # 15. 디스코드에 webhook 설정
      - name: Send Discord Webhook on Success
        if: ${{ success() && inputs.deploy == 'true' && steps.ec2_check.outputs.ok == 'true' }}
        run: |
          curl -H "Content-Type: application/json" \
               -X POST \
               -d '{
                  "content": "✅ *배포 성공!*",
                  "embeds": [
                      {
                        "title": "메인 브랜치에 머지됨",
                        "description": "Docker 이미지 빌드 및 배포 완료",
                        "color": 3066993,
                        "fields": [
                            { "name": "커밋", "value": "${{ github.sha }}", "inline": true },
                            { "name": "작성자", "value": "${{ github.actor }}", "inline": true }
                        ]
                      }
                    ]
                }'

      - name: Send Discord Webhook on Failure
        if: ${{ failure() && inputs.deploy == 'true' && steps.ec2_check.outputs.ok == 'true' }}
        run: |
          curl -H "Content-Type: application/json" \
               -X POST \
               -d '{"content": "❌ *배포 실패:* CI/CD 도중 에러 발생!"}' \
               ${{ secrets.GITHUB_DISCORD_WEBHOOK }}

