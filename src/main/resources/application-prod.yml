spring:
  #multipart upload파일 용량설정
  #default : 1MB
  servlet:
    multipart:
      max-file-size: 5MB
      max-request-size: 5MB
  datasource:
    driver-class-name: com.mysql.cj.jdbc.Driver
    url: ${RDS_MYSQL_URL}
    username: ${RDS_MYSQL_NAME}
    password: ${RDS_MYSQL_SECRET}
  session:
    store-type: redis

  jpa:
    # 데이터베이스 플랫폼을 지정
    database-platform: org.hibernate.dialect.MySQL8Dialect
    # JPA Open EntityManager in View 패턴을 활성화 또는 비활성화
    open-in-view: true
    # JPA 처리 시에 발생하는 SQL을 보여줄 것인지 결정합니다.
    show-sql: true
    hibernate:
      # 운영시에는 validate나 none으로 해야합니다.
      # 수정되면 안되기 때문입니다.
      ddl-auto: update
    properties:
      hibernate:
        show_sql: true
        # 실제 JPA의 구현체인 Hibernate 가 동작하면서 발생하는 SQL을 포맷팅해서 출력합니다.
        # 실행되는 SQL의 가독성을 높여 줍니다.
        format_sql: true
        # LAZY 로딩 시 기본적으로 사용되는 배치 크기를 설정
        # fetch join 사용시 최적화
        default_batch_fetch_size: 100
        use_sql_comments: true

  data:
    web:
      pageable:
        default-page-size: 10
        max-page-size: 2000
        one-indexed-parameters: true
    redis:
      host: redis
      port: 6379

  security:
    oauth2:
      client:
        registration:
          google:
            client-id: ${GOOGLE_CLIENT}
            client-secret: ${GOOGLE_SECRET}
            redirect-uri: ${OAUTH2_URI}/login/oauth2/code/google
            scope:
              - email
              - profile

          # naver
          naver:
            client-id: ${NAVER_CLIENT}
            client-secret: ${NAVER_SECRET}
            client-name: Naver
            redirect-uri: ${OAUTH2_URI}/login/oauth2/code/naver
            authorization-grant-type: authorization_code
            scope:
              - name
              - email
        provider:
          naver:
            authorization-uri: https://nid.naver.com/oauth2.0/authorize
            token-uri: https://nid.naver.com/oauth2.0/token
            user-info-uri: https://openapi.naver.com/v1/nid/me
            user-name-attribute: response
  mvc:
    pathmatch:
      matching-strategy: ant_path_matcher

jwt:
  secret_key: ${JWT_SECRET}
  access:
    expiration: 3600000000
  refresh:
    expiration: 1209600000000

cloud:
  aws:
    credentials:
      access-key: ${S3_ACCESS}
      secret-key: ${S3_SECRET}
    s3:
      bucket: ${S3_BUCKET}
    region:
      # 버킷 생성시 선택한 AWS 리전
      static: ap-northeast-2
      auto: false
    stack:
      # 설정한 CloudFormation 이 없으면 프로젝트 시작이 안되니, 해당 내용을 사용하지 않도록 false 를 등록
      auto: false
logging:
  level:
    org:
      # Hibernate 라이브러리에 속한 org.hibernate.SQL 패키지의 클래스들에 대한 로그 레벨을 설정합니다.
      # 특정 라이브러리나 패키지에 대한 로그 레벨을 따로 조정하고자 할 때 사용됩니다.
      # Hibernate의 SQL 쿼리를 자세히 보고 싶을 때 유용합니다.
      hibernate:
        SQL: debug
    # 이 설정은 애플리케이션 전반적인 로그 레벨을 설정합니다.
    # root는 로깅의 루트 패키지를 나타냅니다.
    # 따라서 root 패키지 이하의 모든 클래스들에 대한 로그 레벨이 debug로 설정됩니다.
    # 이는 애플리케이션 전체에 적용되는 설정이기 때문에 상세한 로그가 많이 생성될 수 있습니다.
    root: info
  config: /home/ubuntu/src/main/resources/log4j2.xml

management:
  info:
    java:
      enabled: true
    os:
      enabled: true
    env:
      enabled: true

  endpoint:
    logfile:
      external-file: ./logs/my.log
    shutdown:
      enabled: true
    health:
      show-details: always
    metrics:
      enabled: true
    prometheus:
      enabled: true

  endpoints:
    web:
      exposure:
        include: ["prometheus", "logfile"]
      base-path: /monitor


server:
  tomcat:
    mbeanregistry:
      enabled: true
info:
  app:
    name: meettify
    company: B.F

slack:
  webhook: ${WEBHOOK}


