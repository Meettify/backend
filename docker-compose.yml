services:
  redis:
    image: redis:latest
    ports:
      - "6379:6379"  # 외부 포트
    restart: always
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 3

  mysql:
    image: mysql:8.0
    container_name: mysql
    environment:
      MYSQL_ROOT_PASSWORD: ${RDS_MYSQL_SECRET}  # 환경 변수를 사용하여 비밀번호 설정
      MYSQL_DATABASE: meettify  # 기본 데이터베이스 생성
      MYSQL_USER: ${RDS_MYSQL_NAME}  # 사용자 이름
      MYSQL_PASSWORD: ${RDS_MYSQL_SECRET}  # 사용자 비밀번호
    ports:
      - "3307:3306"  # 외부 포트
    volumes:
      - mysql_data:/var/lib/mysql  # 데이터 지속성을 위한 볼륨
    restart: always
    healthcheck:
      test: [ "CMD", "mysqladmin", "ping", "-h", "localhost" ]
      interval: 10s
      timeout: 5s
      retries: 3

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - --config.file=/etc/prometheus/prometheus.yml
      - --storage.tsdb.path=/prometheus
      - --storage.tsdb.retention.time=90d # 90일보다 오래된 metrics는 삭제
      - --storage.tsdb.retention.size=10GB # 10GB를 넘을 시 오래된 metrics 삭제
      - --web.console.libraries=/usr/share/prometheus/console_libraries
      - --web.console.templates=/usr/share/proemtheus/consoles
      - --web.enable-admin-api
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9090/" ]
      interval: 30s
      timeout: 10s
      retries: 3

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
    volumes:
      - ./grafana/data:/var/lib/grafana
      - ./grafana/config:/etc/grafana
    environment:
      - GF_SECURITY_ADMIN_USER=admin # grafana 사용자 이름
      - GF_SECURITY_ADMIN_PASSWORD=admin # grafana 사용자 비밀번호
      - GF_USERS_ALLOW_SIGN_UP=false
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:3000" ]
      interval: 30s
      timeout: 10s
      retries: 3

  loki:
    image: grafana/loki:2.9.2
    container_name: loki
    ports:
      - "3100:3100"

  promtail:
    image: grafana/promtail:2.9.2
    volumes:
      - ./promtail-config.yml:/etc/promtail/config.yml
      - ./logs/:/app/logs
      - ./loki-config.yml:/etc/loki/config.yml
      - /var/lib/docker/containers:/var/lib/docker/containers  # 도커 로그 파일 경로 마운트
    command:
      - -config.file=/etc/promtail/config.yml
      - -config.expand-env=true

  nginx:
    image: nginx:latest
    container_name: nginx
    ports:
      - "80:80"
      - "443:443"
    restart: on-failure  # api가 실패했을 때만 재시작
    volumes:
        - ./data/nginx/nginx.conf:/etc/nginx/nginx.conf
        - ./data/certbot/conf:/etc/letsencrypt
        - ./data/certbot/www:/var/www/certbot
    depends_on:
      - api
      - grafana
    command: "/bin/sh -c 'while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g \"daemon off;\"'"
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost" ]
      interval: 30s
      timeout: 10s
      retries: 3

  certbot:
    image: certbot/certbot:latest
    container_name: certbot
    volumes:
      - ./data/certbot/conf:/etc/letsencrypt
      - ./data/certbot/www:/var/www/certbot
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://nginx:80"]  # Nginx에 연결된 URL로 변경
      interval: 30s
      timeout: 10s
      retries: 3

  api:
    build:
      context: .
      dockerfile: docker/api/Dockerfile # Dockerfile 경로
    image: zxzz8014/meettify:latest
    env_file:
      - .env  # 환경 변수를 포함하는 파일
    environment:
      SPRING_PROFILES_ACTIVE: prod  # 활성 Spring 프로파일 설정
      S3_ACCESS: ${S3_ACCESS}  # AWS 액세스 키
      S3_SECRET: ${S3_SECRET}  # AWS 비밀 키
      GOOGLE_CLIENT: ${GOOGLE_CLIENT}  # Google OAuth 클라이언트 ID
      GOOGLE_SECRET: ${GOOGLE_SECRET}  # Google OAuth 비밀 키
      NAVER_CLIENT: ${NAVER_CLIENT}  # Naver OAuth 클라이언트 ID
      NAVER_SECRET: ${NAVER_SECRET}  # Naver OAuth 비밀 키
      OAUTH2_URI: ${OAUTH2_URI}
      RDS_MYSQL_URL: ${RDS_MYSQL_URL}  # MySQL URL
      RDS_MYSQL_NAME: ${RDS_MYSQL_NAME}  # MySQL 사용자 이름
      RDS_MYSQL_SECRET: ${RDS_MYSQL_SECRET}  # MySQL 비밀번호
      JWT_SECRET: ${JWT_SECRET}  # JWT 비밀 키
      REDIS_HOST: redis  # Redis 서비스 이름으로 설정
      REDIS_PORT: 6379  # Redis 포트
      WEBHOOK: ${WEBHOOK}
    depends_on:
      - mysql  # MySQL 서비스에 의존
      - redis  # Redis 서비스에 의존
    ports:
      - "8080:8080"  # 외부 포트
    restart: always
    volumes:
      - ./logs:/app/logs  # 로그 파일을 저장할 디렉토리
      - ./src/main/resources/log4j2.xml:/var/log4j2.xml  # Log4j2 설정 파일을 마운트
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "mysql"]  # MySQL 서비스 상태 확인
      interval: 10s  # 상태 확인 간격
      retries: 5  # 실패 시 재시도 횟수
      timeout: 5s  # 타임아웃 설정

volumes:
  mysql_data:  # MySQL 데이터 지속성을 위한 볼륨
  grafana_data:  # Grafana 데이터 지속성을 위한 볼륨
  gradle_home:  # Gradle 홈 디렉토리
  app_home:  # 애플리케이션 홈 디렉토리
  grafana-storage:
    driver: local